"""Class to handle Nexstrain-generated SARS-CoV-2 phylogenetic trees."""

from pathlib import Path

import structlog

from cladetime import CladeTime
from cladetime.exceptions import TreeNotAvailableError
from cladetime.util.reference import _get_s3_object_url
from cladetime.util.sequence import _get_ncov_metadata

logger = structlog.get_logger()


class Tree:
    """Interface for current and historic SARS-CoV-2 reference trees.

    The Tree class represents a SARS-CoV-2 phylogenetic reference tree
    in Auspice JSON v2 format. Tree is instantiated with an optional
    argument that specify the point in time at which to access the
    SARS-CoV-2 reference tree generated by Nextstrain.

    Parameters
    ----------
    clade_time : cladetime.CladeTime
        A CladeTime instance that will ne used to set the version of the
        Nextstrain reference tree represented by this Tree instance.
    """

    def __init__(self, clade_time: CladeTime):
        """Tree constructor."""
        self._clade_time = clade_time
        self.as_of = self._clade_time.tree_as_of
        self._url = self.url

    @property
    def url(self) -> str | None:
        """
        str : URL to the JSON file that represents the SARS-CoV-2
        reference tree that was current as of
        :any:`cladetime.util.Tree.as_of<as_of>`.
        """
        try:
            return self._get_tree_url()
        except TreeNotAvailableError as err:
            print(err)
            return None

    def __repr__(self):
        return f"Tree(as_of={self.as_of})"

    def __str__(self):
        return f"Represents Nexclade reference tree data as of {self.as_of}"

    def _get_tree_url(self):
        """Get the URL to a Nextclade SARS-CoV-2 reference tree.

        This function retrieves ncov metadata that corresponds to the
        tree_as_of date specified in the class's clade_time parameter.
        The metadata contains information about the Nextclade dataset
        it used for clade assignment. _get_tree_url constructs a URL to
        the Nextclade dataset's tree.json file and returns it.

        Returns:
        --------
        str
            URL to the tree.json file used for clade assignment as of
            the date specified in :any:`cladetime.util.Tree.as_of<as_of>`.

        Raises:
        -------
        TreeNotAvailableError
            If there is no ncov metadata available for the specified date.
        """

        # We can only reliably retrieve the a past reference tree if we
        # have access to the ncov metadata for that date
        min_tree_as_of = self._clade_time._config.nextstrain_min_ncov_metadata_date
        if min_tree_as_of > self.as_of:
            logger.error("Reference tree not available", tree_as_of=self.as_of)
            raise TreeNotAvailableError(
                f"Reference tree not available for {self.as_of} (earliest available tree date is {min_tree_as_of})"
            )

        # get the ncov metadata as of the CladeTime's tree_as_of date
        url_ncov_metadata = self._get_url_ncov_metadata()

        if not url_ncov_metadata:
            logger.error("Reference tree not available", tree_as_of=self.clade_time.tree_as_of)
            raise TreeNotAvailableError(f"Reference tree not available for {self.clade_time.tree_as_of}")

        ncov_metadata = _get_ncov_metadata(url_ncov_metadata)
        nextclade_dataset_name = ncov_metadata.get("nextclade_dataset_name_full")
        nextclade_dataset_version = ncov_metadata.get("nextclade_dataset_version")

        tree_url = (
            Path(self._clade_time._config.nextclade_data_url)
            / nextclade_dataset_name
            / nextclade_dataset_version
            / "tree.json"
        )
        return tree_url

    def _get_url_ncov_metadata(self):
        """Get the URL to the ncov metadata file for the tree_as_of date."""
        return _get_s3_object_url(
            self._clade_time._config.nextstrain_ncov_bucket,
            self._clade_time._config.nextstrain_ncov_metadata_key,
            self.as_of,
        )[1]

    def get_reference_tree(self) -> dict:
        """Return a reference tree used for SARS-CoV-2 clade assignments

        Retrieves the reference tree that was current as of
        :any:`tree_as_of<tree_as_of>`.

        This method is not yet implemented.

        Returns
        -------
        dict
        """
        return {self.as_of: "not implemented"}
